// <auto-generated />
using System;
using CarTracking.BE.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarTracking.BE.Infrastructure.Migrations.DataDb
{
    [DbContext(typeof(CarTrackingDbContext))]
    [Migration("20250202122141_AddedTripId")]
    partial class AddedTripId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("CarTrackingData")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarTracking.BE.Domain.Entities.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CodeValidTill")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts", "CarTrackingData");
                });

            modelBuilder.Entity("CarTracking.BE.Domain.Entities.Device", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsAdminDevice")
                        .HasColumnType("bit");

                    b.Property<string>("NotificationToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("VehicleId")
                        .IsUnique()
                        .HasFilter("[VehicleId] IS NOT NULL");

                    b.ToTable("Devices", "CarTrackingData");
                });

            modelBuilder.Entity("CarTracking.BE.Domain.Entities.Status", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Received")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Sent")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TripId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Statuses", "CarTrackingData");
                });

            modelBuilder.Entity("CarTracking.BE.Domain.Entities.Vehicle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeviceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAssignedToDevice")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("VirtualGarageIsEnabled")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Vehicles", "CarTrackingData");
                });

            modelBuilder.Entity("CarTracking.BE.Domain.Entities.Device", b =>
                {
                    b.HasOne("CarTracking.BE.Domain.Entities.Account", "Account")
                        .WithMany("Devices")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CarTracking.BE.Domain.Entities.Vehicle", "Vehicle")
                        .WithOne("Device")
                        .HasForeignKey("CarTracking.BE.Domain.Entities.Device", "VehicleId");

                    b.Navigation("Account");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarTracking.BE.Domain.Entities.Status", b =>
                {
                    b.HasOne("CarTracking.BE.Domain.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarTracking.BE.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("StatusHistory")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("CarTracking.BE.Domain.Entities.BatteryInfo", "BatteryInfo", b1 =>
                        {
                            b1.Property<string>("StatusId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<double>("ChargeLevel")
                                .HasColumnType("float");

                            b1.Property<string>("Id")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("IsCharging")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsEnergySaverOn")
                                .HasColumnType("bit");

                            b1.HasKey("StatusId");

                            b1.ToTable("Statuses", "CarTrackingData");

                            b1.WithOwner()
                                .HasForeignKey("StatusId");
                        });

                    b.OwnsOne("CarTracking.BE.Domain.Entities.Location", "Location", b1 =>
                        {
                            b1.Property<string>("StatusId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<double?>("Accuracy")
                                .HasColumnType("float");

                            b1.Property<double?>("Altitude")
                                .HasColumnType("float");

                            b1.Property<string>("Id")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.Property<double?>("Speed")
                                .HasColumnType("float");

                            b1.HasKey("StatusId");

                            b1.ToTable("Statuses", "CarTrackingData");

                            b1.WithOwner()
                                .HasForeignKey("StatusId");
                        });

                    b.Navigation("BatteryInfo")
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarTracking.BE.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("CarTracking.BE.Domain.Entities.Account", "Account")
                        .WithMany("Vehicles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("CarTracking.BE.Domain.Entities.VehicleSettings", "Settings", b1 =>
                        {
                            b1.Property<string>("VehicleId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Id")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("LowBatteryThreshold")
                                .HasColumnType("int");

                            b1.Property<double>("Radius")
                                .HasColumnType("float");

                            b1.HasKey("VehicleId");

                            b1.ToTable("Vehicles", "CarTrackingData");

                            b1.WithOwner()
                                .HasForeignKey("VehicleId");
                        });

                    b.OwnsOne("CarTracking.BE.Domain.Entities.VirtualGarage", "VirtualGarage", b1 =>
                        {
                            b1.Property<string>("VehicleId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Id")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.Property<DateTime>("ValidTill")
                                .HasColumnType("datetime2");

                            b1.HasKey("VehicleId");

                            b1.ToTable("Vehicles", "CarTrackingData");

                            b1.WithOwner()
                                .HasForeignKey("VehicleId");
                        });

                    b.Navigation("Account");

                    b.Navigation("Settings")
                        .IsRequired();

                    b.Navigation("VirtualGarage");
                });

            modelBuilder.Entity("CarTracking.BE.Domain.Entities.Account", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("CarTracking.BE.Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("Device");

                    b.Navigation("StatusHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
